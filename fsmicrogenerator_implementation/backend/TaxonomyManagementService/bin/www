#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require("../app");
var http = require("http");

var registryHelpers = require("../helpers/registry.helpers");
const logger = require("../middlewares/winston.middleware.js");

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port, async () => {
  await registryHelpers.registerService();
  logger.info(`${process.env.SERVICENAME} running on port ${port} in ${process.env.NODE_ENV} mode`);
});

/**
 * Handle process exit.
 */
const handleExit = async (signal) => {
  logger.info(`Received ${signal}. Cleaning up...`);
  await registryHelpers.unregisterService();
  process.exit(0); // Exit the process
};

process.on("SIGINT", handleExit); // Handle Ctrl+C (SIGINT)
process.on("SIGTERM", handleExit); // Handle termination signal (SIGTERM)
process.on('unhandledRejection', async (reason, promise) => {
  logger.error('Unhandled promise rejection:', reason);
  if (!global.serviceUnregistered) {
    global.serviceUnregistered = true;
    await registryHelpers.unregisterService();
  }
  process.exit(1);
});
process.on('uncaughtException', async (err) => {
  logger.error('Uncaught exception:', err);
  if (!global.serviceUnregistered) {
    global.serviceUnregistered = true;
    await registryHelpers.unregisterService();
  }
  process.exit(1);
});

server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  switch (error.code) {
    case "EACCES":
      logger.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      logger.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? `pipe ${addr}` : `port ${addr.port}`;
  logger.info(`Server is listening on ${bind}`);
}
